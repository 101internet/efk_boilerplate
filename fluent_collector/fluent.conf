# Принимаем логи от клиентов - сборщиков
<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

# routing
# ищем имя сервиса kibana, ставим соответствующий тег
<match docker.var.log.**>
  @type rewrite_tag_filter
  <rule>
   key $["meta"]["service"]
   pattern ^kibana
   tag docker.kibana
  </rule>

  # frontend
  <rule>
   key $["meta"]["service"]
   pattern /101frontend_node/
   tag docker.101frontend
  </rule>

   # Все остальные логи для которых не были определены теги
  <rule>
   key log
   pattern /.+/
   tag docker.other
  </rule>
</match>

# Отправляем вникуда =) логи которые не попали в роутинг
#<match docker.other>
#  @type null
#</match>
<match docker.other>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix docker.other
</match>

# Делим логи на простые и логи с ошибками
<match docker.kibana>
  @type rewrite_tag_filter
  <rule>
    key stream
    pattern /stdout/
    tag docker.kibana.stdout
  </rule>
  <rule>
    key stream
    pattern /stderr/
    tag docker.kibana.stderr
  </rule>
</match>

# Преобразуем в json поле log
<filter docker.kibana.**>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type json
  </parse>
</filter>

# Удаляем ненужные поля
<filter docker.kibana.**>
  @type record_transformer
  remove_keys attrs,meta,log,stream
</filter>

# Вывод в эластик
<match docker.kibana.stdout>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix docker.kibana.stdout
</match>

<match docker.kibana.stderr>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix docker.kibana.stderr
</match>

#############################

# Делим логи на простые и логи с ошибками
<match docker.101frontend>
  @type rewrite_tag_filter
  <rule>
    key stream
    pattern /stdout/
    tag docker.101frontend.stdout
  </rule>
  <rule>
    key stream
    pattern /stderr/
    tag docker.101frontend.stderr
  </rule>
</match>

# Преобразуем в json поле log
#<filter docker.101frontend.**>
#  @type parser
#  key_name log
#  reserve_data true
#  <parse>
#    @type json
#  </parse>
#</filter>

# Удаляем ненужные поля
<filter docker.101frontend.**>
  @type record_transformer
  remove_keys attrs,meta,stream
</filter>

# Вывод в эластик
<match docker.101frontend.stdout>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix docker.101frontend.stdout
</match>

<match docker.101frontend.stderr>
  @type elasticsearch
  host elasticsearch
  port 9200
  logstash_format true
  logstash_prefix docker.101frontend.stderr
</match>